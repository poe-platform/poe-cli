name: Pull Request Reviewer
on:
  pull_request:
    types:
      - opened
      - ready_for_review
      - synchronize
  workflow_dispatch: null
jobs:
  review:
    name: Cross-check Pull Request
    if: ${{ false }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      NODE_VERSION: "20"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build CLI
        run: npm run build
      - name: Determine reviewer
        id: reviewer
        env:
          PR_LABELS: ${{ toJson(github.event.pull_request.labels) }}
        run: |
          node <<'NODE'
            const fs = require("node:fs");
            const labels = JSON.parse(process.env.PR_LABELS ?? "[]");
            const providers = [
              "claude-code",
              "codex",
              "opencode",
              "roo-code"
            ];
            const authored = labels
              .map((label) => label?.name ?? "")
              .find((name) => name.startsWith("agent:"));
            const excluded = authored ? authored.split(":")[1] : undefined;
            const candidates = providers.filter((id) => id !== excluded);
            if (candidates.length === 0) {
              process.stderr.write("No reviewer candidates found.\n");
              process.exit(1);
            }
            const index = Math.floor(Math.random() * candidates.length);
            const service = candidates[index];
            const outputs = [`service=${service}`];
            if (excluded) {
              outputs.push(`author_service=${excluded}`);
            }
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `${outputs.join("\n")}\n`);
          NODE
      - name: Cache Poe API key
        env:
          POE_API_KEY: ${{ secrets.POE_API_KEY }}
        run: npx poe-setup login --api-key "${POE_API_KEY}"
      - name: Configure reviewer provider
        env:
          POE_API_KEY: ${{ secrets.POE_API_KEY }}
        run: |
          SERVICE="${{ steps.reviewer.outputs.service }}"
          case "$SERVICE" in
            claude-code|opencode)
              npx poe-setup configure "$SERVICE" --api-key "${POE_API_KEY}" --install
              ;;
            roo-code)
              npx poe-setup configure "$SERVICE" --api-key "${POE_API_KEY}"
              ;;
            codex)
              npx poe-setup configure "$SERVICE"
              ;;
            *)
              echo "::error::Unsupported provider $SERVICE"
              exit 1
              ;;
          esac
      - name: Run review agent
        id: agent
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          PROMPT=$(node <<'NODE'
            const number = process.env.PR_NUMBER;
            const title = process.env.PR_TITLE ?? "";
            const url = process.env.PR_URL ?? "";
            const author = process.env.PR_AUTHOR ?? "";
            const notes = [
              `Perform a code review for pull request #${number}: ${title}.`,
              "Focus on correctness, TDD coverage, and repository conventions.",
              "Prepare actionable review comments and a summary.",
              `Link to PR: ${url}`,
              `Original author: ${author}`
            ];
            process.stdout.write(notes.join("\n\n"));
          NODE
          )
          npx poe-setup agent "$PROMPT" | tee review-summary.txt
      - name: Submit review comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BODY=$(cat review-summary.txt)
          gh pr review "${{ github.event.pull_request.number }}" --comment --body "$BODY"
